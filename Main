import os
import hashlib
import multiprocessing

def hash_file(file_path):
    """Hash a file using SHA-256."""
    hasher = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            while chunk := f.read(8192):  # Read in 8KB chunks
                hasher.update(chunk)
        return file_path, hasher.hexdigest()
    except Exception as e:
        return file_path, f"Error: {e}"

def hash_all_files_parallel(directory):
    """Hash all files in a directory using multiprocessing."""
    files_to_hash = []

    # Collect all file paths
    for root, _, files in os.walk(directory):
        for file in files:
            files_to_hash.append(os.path.join(root, file))

    # Use multiprocessing Pool
    with multiprocessing.Pool(processes=os.cpu_count()) as pool:
        results = pool.map(hash_file, files_to_hash)

    return results
def check_parent_process():
    suspicious_parents = ["x32dbg.exe", "x64dbg.exe", "ollydbg.exe", "ida.exe", "windbg.exe"]
    parent = psutil.Process().parent()
    return parent and parent.name().lower() in suspicious_parents

def check_timing():
    start = time.time()
    for _ in range(10000000):
        pass
    return time.time() - start > 0.3
import ctypes
import os

# Byte string of the image (you need to convert your image to a byte string)
image_bytes = b'...<insert your byte string here>...'

def save_image(image_bytes, output_path):
    with open(output_path, 'wb') as f:
        f.write(image_bytes)

# Save the image to disk
output_image_path = "output_image.jpg"  # Specify your desired image path
save_image(image_bytes, output_image_path)

# Change wallpaper (Windows example)
SPI_SETDESKWALLPAPER = 20

def set_wallpaper(image_path):
    ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, image_path, 3)

# Change the wallpaper
set_wallpaper(output_image_path)

print(f"Wallpaper set with the image at {output_image_path}")
if __name__ == "__main__":
    multiprocessing.freeze_support()  # Required for Nuitka!
    
    directory = r"C:\path\to\files"  # Change this to your directory
    results = hash_all_files_parallel(directory)

    for file, hash_value in results:
        print(f"{file}: {hash_value}")
